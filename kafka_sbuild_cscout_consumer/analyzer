#!/bin/bash

R_OPTION_PARAM="cgraph.txt?all=1"

# run CSsout on package
mkdir -p /callgraph
rm -rf /callgraph/*
mkdir -p /var/run/csmake-spy
cd $2
MAKE=/usr/local/bin/csmake dpkg-buildpackage -b 2> csmake_error

# Copy changelog
cp debian/changelog /callgraph/
# Copy dsc file
cp $1 /callgraph/

# Install fcan dependencies
pip3 install setuptools
pip3 install pydpkg
# Create file to filter out CScout nodes from canonical call graph
echo "
{
    \"CScout\": {
        \"forge\": \"\",
        \"constraints\": \"\",
        \"architecture\": \"\",
        \"regex\": [
            \"^/usr/local/include/cscout.*\"
        ],
        \"keep\": false
    }
}
" > custom_deps.json

if cscout -R $R_OPTION_PARAM make.cs 2>cscout_error; then
    if [[ -f "cscout_error" ]]; then
        cp cscout_error /callgraph/
    fi
else
    if [[ -f "cscout_error" ]]; then
        cp cscout_error /callgraph/ && \
        echo "failed" > /callgraph/report
    fi
    if [[ -f "csmake_error" ]]; then
        cp csmake_error /callgraph/
    fi
fi
if [[ -f "cgraph.txt" ]]; then
    cp cgraph.txt /callgraph/
    if ls ../*.deb 1> /dev/null 2>&1; then
        cp ../*.deb /callgraph/
    fi
    if ls ../*.udeb 1> /dev/null 2>&1; then
        cp ../*.udeb /callgraph/
    fi
    if fcan -c custom_deps.json /callgraph/ 2> /callgraph/fcan.error; then
        echo "done" > /callgraph/report
    else
        echo "failed" > /callgraph/report
    fi
fi

rm -rf /var/run/csmake-spy
