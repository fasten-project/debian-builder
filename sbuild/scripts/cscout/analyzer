#!/bin/bash
# Copyright (c) 2018-2020 FASTEN.
#
# This file is part of FASTEN
# (see https://www.fasten-project.eu/).
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Parameters
SRC=$1
R_OPTION_PARAM="cgraph.txt?all=1&n=p&type=1&defined=1&nodes=1&nline=1"
TOOL='cscout'

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/base_analyzer"

build() {
    printf "\n###Debug: build\n"
    echo "tool: cscout" >> $DEST_PKG/report
    rm -rf /tmp_dir && mkdir -p /tmp_dir
    if ! FORCE_UNSAFE_CONFIGURE=1 DEB_BUILD_OPTIONS="nodocs notest nocheck" CSMAKEFLAGS='-T /tmp_dir -A -s cscout_projects -k' MAKE=/usr/local/bin/csmake /usr/bin/time -v -o $DEST_PKG/build.time dpkg-buildpackage -b 2> error; then
        cp error $DEST_PKG/build.err
        echo "build: failed" >> $DEST_PKG/report
        exit -1
    else
        if [ -f "error" ]; then
            cp error $DEST_PKG/build.war
        fi
    fi
    echo "build: success" >> $DEST_PKG/report
}

cs_merge_files() {
    printf "\n###Debug: merge_cs_files\n"
    cd $TOOL_DIR
    for p in $(ls *\#*); do
        name=$(echo $p | sed 's/.*#//')
        cat $p >> $name
        rm -f $p
    done
    cd $PWD_SRC
}

run_cscout() {
    printf "\n###Debug: run_cscout\n"
    cd $TOOL_DIR
    cs_projects=$(ls)
    for cs in $cs_projects; do
        echo "Processing $cs"
        x1=$(basename -- "$cs")
        x=${x1::${#x1}-3}
        if [[ ! $USED_BINARIES == *"$x"* ]]; then
            echo "Skip $cs"
            echo "#analysis: $cs: not in USED_BINARIES" >> $DEST_PKG/report
            continue
        fi
        if [[ -f "$cs" && ! -s "$cs" ]]; then
            echo "#analysis: ${cs}: empty" >> $DEST_PKG/report
            echo "analysis: ${cs}: failed: empty" >> $DEST_PKG/report
            continue
        fi
        if /usr/bin/time -v -o $DEST_PKG/$cs.time cscout -R "$R_OPTION_PARAM" $cs 2>error; then
            mv cgraph.txt $TOOL_DIR/$(basename $cs .cs).txt
            if [ -f "error" ]; then
                cp error $DEST_PKG/$cs.warn
            fi
            echo "analysis: ${cs}: success" >> $DEST_PKG/report
        else
            cp error $DEST_PKG/$cs.err
            echo "analysis: ${cs}: failed: cscout" >> $DEST_PKG/report
        fi
    done
    cd $PWD_SRC
    for i in $SYMLINKED; do
        original=$(readlink -f $i)
        original=$(basename -- "$original")
        bname=$(basename $i)
        cp $TOOL_DIR/$original.txt $TOOL_DIR/$bname.txt 2> /dev/null
        cp $TOOL_DIR/$original.cs $TOOL_DIR/$bname.cs 2> /dev/null
    done
}

main () {
    TOOL_DIR="$PWD_SRC/cscout_projects"
    SECONDS=0
    P=0
    init
    build
    TOTAL=$(($SECONDS-$P))
    echo "time_elapsed: build: $TOTAL" >> $DEST_PKG/report
    P=$SECONDS
    cs_merge_files
    TOTAL=$(($SECONDS-$P))
    echo "time_elapsed: cs_merge_files: $TOTAL" >> $DEST_PKG/report
    P=$SECONDS
    detect_binaries
    TOTAL=$(($SECONDS-$P))
    echo "time_elapsed: detect_binaries: $TOTAL" >> $DEST_PKG/report
    P=$SECONDS
    detect_packages
    TOTAL=$(($SECONDS-$P))
    echo "time_elapsed: detect_packages: $TOTAL" >> $DEST_PKG/report
    P=$SECONDS
    run_cscout
    TOTAL=$(($SECONDS-$P))
    echo "time_elapsed: run_cscout: $TOTAL" >> $DEST_PKG/report
    P=$SECONDS
    produce_callgraphs
    TOTAL=$(($SECONDS-$P))
    echo "time_elapsed: produce_callgraphs: $TOTAL" >> $DEST_PKG/report
}

main

exit 0
