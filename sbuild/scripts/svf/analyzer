#!/bin/bash
# Parameters
DSC=$1
SRC=$2

# Working directories
PWD_PKG=$(pwd)
cd $SRC
PWD_SRC=$(pwd)
cd ../

# Global variables
R_OPTION_PARAM="cgraph.txt?all=1&n=p&type=1"
NAME=$(cat $DSC | grep '^Source: ')
NAME=${NAME#"Source: "}
NAME="$(echo -e "${NAME}" | tr -d '[:space:]')"
VERSION=$(cat $DSC | grep '^Version: ')
VERSION=${VERSION#"Version: "}
VERSION="$(echo -e "${VERSION}" | tr -d '[:space:]')"
PKG="$NAME-$VERSION"

# Directories
DEST="/callgraphs/"
# $DEST_PKG/binary_package/{build.err,svf.err,fcan.err,status,fcg.json}
DEST_PKG="$DEST$PKG/$VERSION"
BINARIES_PER_PKG="$PWD_SRC/binaries_per_pkg"
SVF_DIR="$PWD_SRC/svf_data"
PACKAGES="$PWD_PKG/packages"

BINARIES=''
SYMLINKED=''
TOTAL_BIN=''
HAS_DEBS=0

cd $SRC
mkdir $BINARIES_PER_PKG
mkdir $SVF_DIR
mkdir $PACKAGES

prepare_env() {
    export LLVM_SRC=/usr/local/installations/llvm-7.0.0.src
    export LLVM_OBJ=/usr/lib/llvm-7/build
    export LLVM_DIR=/usr/lib/llvm-7/build
    export SVF_HOME=/usr/local/installations/SVF/
    export PATH=$SVF_HOME/Release-build/bin:$PATH
    export LLVM_COMPILER=clang
    export CFLAGS='-g'
    # replace '=' and ':=' with '?=' in rules Makefile, in templates Makefiles
    sed -i -E "s/CC [:]?=/CC ?=/g" debian/rules
    sed -i -E "s/CC[:]?=/CC?=/g" debian/rules
    for i in Makefile*; do
        sed -i -E "s/CC [:]?=/CC ?=/g" $i 2> /dev/null
        sed -i -E "s/CC[:]?=/CC?=/g" $i 2> /dev/null
    done
    ln -s /usr/bin/clang-7 /usr/bin/clang
    ln -s /usr/bin/clang++-7 /usr/bin/clang++
    ln -s /usr/bin/llvm-link-7 /usr/bin/llvm-link
    ln -s /usr/local/bin/wllvm /usr/bin/wllvm
    ln -s /usr/local/bin/wllvm++ /usr/bin/wllvm++
}

build() {
    CC=/usr/bin/wllvm CXX=/usr/bin/wllvm++ dpkg-buildpackage -b 2>error
    STATUS=$?
    if [ $STATUS -ne 0 ]; then
        HAS_DEBS=$STATUS
        ./debian/rules clean && \
            CC=/usr/bin/wllvm CXX=/usr/bin/wllvm++ ./configure --prefix=$(pwd)/debian/tmp
        CC=/usr/bin/wllvm CXX=/usr/bin/wllvm++ make DESTDIR=$(pwd)/debian/tmp
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
            exit -1
            # TODO add checks
        fi
    fi
}

detect_binaries() {
    printf "\n###Debug: binaries\n"
    EXECUTABLES=$(find -type f -executable -exec sh -c \
        "file -i '{}' | grep -q 'executable; charset=binary'" \; -print)
    ARCHIVES=$(find -type f -exec sh -c \
        "file -i '{}' | grep -q 'archive; charset=binary'" \; -print)
    SHAREDLIBS=$(find -type f -exec sh -c \
        "file -i '{}' | grep -q 'sharedlib; charset=binary'" \; -print)
    BINARIES="${EXECUTABLES} ${ARCHIVES} ${SHAREDLIBS}"
    SYMLINKED=$(find -type l -exec sh -c \
        "file -i '{}' | grep -q 'charset=binary'" \; -print)
    TOTAL_BIN="${BINARIES} ${SYMLINKED}"
}

detect_packages() {
    # Keep only those inside the debian directory
    printf "\n###Debug: detect_packages\n"
    # Number of packages
    NUM=$(awk '/^Package:/{a++}END{print a}' debian/control)
    # Names of packages
    NAMES=$(grep "Package:" debian/control | cut -d ":" -f2 | awk '{$1=$1};1')
    if [ "$NUM" -gt "1" ]; then
        for n in $NAMES; do
            prefix="./debian/tmp/"
            install_file="debian/$n.install"
            if [ -f $install_file ]; then
                for path in $(cat $install_file | cut -d ' ' -f1); do
                    for f in $prefix$path; do
                        x=$(basename -- "$f")
                        if [[ "$TOTAL_BIN" == *"$x"* ]]; then
                            # We may need to look for hole path
                            # It may have duplicates
                            echo "$x" >> $BINARIES_PER_PKG/$n
                        fi
                    done
                done
            fi
        done
    else
        for bin in $TOTAL_BIN; do
            x=$(basename -- "$bin")
            # It may have duplicates
            echo "$x" >> $BINARIES_PER_PKG/$NAMES
        done
    fi
}

run_svf() {
    printf "\n###Debug: run_svf\n"
    for i in $BINARIES; do
        extract-bc -b $i 2> bc_error
        # TODO check if bc exists
        wpa -fspta -dump-callgraph $i.bc 2> svf_error
        # TODO check if svf worked
        # If there are many FILES with same basename there may be a problem.
        bname=$(basename $i)
        cp callgraph_final.dot $SVF_DIR/$bname.dot
        cp $i.bc $SVF_DIR/$bname.bc
        cp $i.wpa $SVF_DIR/$bname.wpa
    done
}

# If build failed we want to rebuild the project to get the .deb
rebuild() {
    echo "REBUILD"
    echo "$HAS_DEBS"
    echo "REBUILD"
    if [ $HAS_DEBS -ne 0 ]; then
        sed -i -E 's/CC \?=/CC =/g' debian/rules
        sed -i -E 's/CC\?=/CC=/g' debian/rules
        for i in Makefile*; do
            sed -i -E 's/CC \?=/CC =/g' $i 2> /dev/null
            sed -i -E 's/CC\?=/CC=/g' $i 2> /dev/null
        done
        dpkg-buildpackage -b
    fi
}

convert_dot_to_csv() {
    ls $SVF_DIR
    echo $TOTAL_BIN
    # copy call graphs for symlinked
}

produce_callgraphs() {
    for pkg in $(ls $BINARIES_PER_PKG); do
            mkdir -p $PACKAGES/$pkg
            cp ../${pkg}_*.*deb $PACKAGES/$pkg
            for bin in $(cat binaries_per_pkg/$pkg); do
                    cat $SVF_DIR/$bin.csv >> $PACKAGES/$pkg/cgraph.txt
            done
    done
    cp ../*.dsc $PACKAGES/*/$pkg.dsc
    for d in $(ls $PACKAGE); do
        if fcan $PACKAGES/$d; then
            echo "COPY"
        fi
    done
}

main () {
    # They clean in rebuild some *.bc files some move them in a dir
    prepare_env && build && detect_binaries && run_svf && rebuild && \
        detect_packages # && convert_dot_to_csv && produce_callgraphs
    # install_deps
    # exports
    # replace_cc
    # run
}

main

exit 0
