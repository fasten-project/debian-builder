#!/bin/bash
# Parameters
SRC=$1
TOOL='svf'

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/base_analyzer"

prepare_env() {
    export LLVM_SRC=/usr/local/installations/llvm-7.0.0.src
    export LLVM_OBJ=/usr/lib/llvm-7/build
    export LLVM_DIR=/usr/lib/llvm-7/build
    export SVF_HOME=/usr/local/installations/SVF/
    export PATH=$SVF_HOME/Release-build/bin:$PATH
    export LLVM_COMPILER=clang
    export CFLAGS='-g -O0 -Xclang -disable-O0-optnone'
    # replace '=' and ':=' with '?=' in rules Makefile, in templates Makefiles
    sed -i -E "s/CC [:]?=/CC ?=/g" debian/rules
    sed -i -E "s/CC[:]?=/CC?=/g" debian/rules
    for i in Makefile*; do
        sed -i -E "s/CC [:]?=/CC ?=/g" $i 2> /dev/null
        sed -i -E "s/CC[:]?=/CC?=/g" $i 2> /dev/null
    done
    ln -s /usr/bin/clang-7 /usr/bin/clang
    ln -s /usr/bin/opt-7 /usr/bin/opt
    ln -s /usr/bin/clang++-7 /usr/bin/clang++
    ln -s /usr/bin/llvm-link-7 /usr/bin/llvm-link
    ln -s /usr/local/bin/wllvm /usr/bin/wllvm
    ln -s /usr/local/bin/wllvm++ /usr/bin/wllvm++
}

build() {
    printf "\n###Debug: build\n"
    echo "tool: svf" >> $DEST_PKG/report
    CC=/usr/bin/wllvm CXX=/usr/bin/wllvm++ dpkg-buildpackage -b 2>error
    STATUS=$?
    if [ $STATUS -ne 0 ]; then
        echo "#build_heuristic: true" >> $DEST_PKG/report
        cp error $DEST_PKG/old_build.err
        HAS_DEBS=$STATUS
        ./debian/rules clean && \
            CC=/usr/bin/wllvm CXX=/usr/bin/wllvm++ ./configure --prefix=$(pwd)/debian/tmp 2> config
        CC=/usr/bin/wllvm CXX=/usr/bin/wllvm++ make DESTDIR=$(pwd)/debian/tmp 2> error
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
            cp config $DEST_PKG/config.err
            cp error $DEST_PKG/build.err
            echo "build: failed" >> $DEST_PKG/report
            exit -1
        fi
    fi
    cp error $DEST_PKG/build.war
    echo "build: success" >> $DEST_PKG/report
}

run_svf() {
    printf "\n###Debug: run_svf\n"
    for i in $BINARIES; do
        echo "Processing $i"
        # When we know the debs from the first build we can skip
        # binaries that aren't used in debs
        if [ $HAS_DEBS -eq 0 ]; then
            x=$(basename -- "$i")
            if [[ ! $USED_BINARIES == *"$x"* ]]; then
                echo "Skip $i"
                echo "#analysis: $i: not in USED_BINARIES" >> $DEST_PKG/report
                continue
            fi
        fi
        extract-bc -b $i 2> bc_error
        if [ $? -ne 0 ]; then
            echo "analysis: $i: failed: extract_bc" >> $DEST_PKG/report
            cp bc_error $DEST_PKG/$i.bc.err
            continue
        fi
        echo "#extract_bc $i: success" >> $DEST_PKG/report
        /usr/local/bin/extract-function-info.sh $i.bc /usr/local/bin/libLLVMFuncInfoPass.so > $i.txt 2> error
        if [ $? -ne 0 ]; then
            echo "analysis: $i: failed: svf" >> $DEST_PKG/report
            cp error $DEST_PKG/$i.svf.err
            continue
        fi
        echo "#svf $i: success" >> $DEST_PKG/report
        echo "analysis: $i: success" >> $DEST_PKG/report
        bname=$(basename $i)
        cp $i.txt $TOOL_DIR/$bname.txt
        cp $i.bc $TOOL_DIR/$bname.bc
        cp $i.wpa $TOOL_DIR/$bname.wpa
    done
    for i in $SYMLINKED; do
        original=$(readlink -f $i)
        original=$(basename -- "$original")
        bname=$(basename $i)
        if [ -f "$TOOL_DIR/$original.txt" ]; then
            cp $TOOL_DIR/$original.txt $TOOL_DIR/$bname.txt
        fi
    done
}

# If build failed we want to rebuild the project to get the .deb files
rebuild() {
    sed -i -E 's/CC \?=/CC =/g' debian/rules
    sed -i -E 's/CC\?=/CC=/g' debian/rules
    for i in Makefile*; do
        sed -i -E 's/CC \?=/CC =/g' $i 2> /dev/null
        sed -i -E 's/CC\?=/CC=/g' $i 2> /dev/null
    done
    dpkg-buildpackage -b 2> error
    if [ $? -ne 0 ]; then
        cp error $DEST_PKG/rebuild.err
        echo "produce_debs: failed" >> $DEST_PKG/report
        exit -1
    fi
    echo "produce_debs: success" >> $DEST_PKG/report
}

main () {
    TOOL_DIR="$PWD_SRC/svf_data"
    init
    prepare_env 
    build 
    detect_binaries
    # Optimization
    # Use info from detect_packages before run_svf
    # if the packages were generated in the first build
    if [ $HAS_DEBS -ne 0 ]; then
        run_svf 
        rebuild 
        detect_packages
    else
        echo "produce_debs: success" >> $DEST_PKG/report
        detect_packages 
        run_svf
    fi
    produce_callgraphs
}

main

exit 0
